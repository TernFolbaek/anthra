{"ast":null,"code":"var _jsxFileName = \"/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/Dashboard/Components/GroupModal/GroupModal.tsx\",\n  _s = $RefreshSig$();\n// src/components/GroupModal.tsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './GroupModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroupModal = ({\n  onClose,\n  onGroupCreated\n}) => {\n  _s();\n  const [groupName, setGroupName] = useState('');\n  const [connections, setConnections] = useState([]);\n  const [selectedUserIds, setSelectedUserIds] = useState([]);\n  const token = localStorage.getItem('token');\n  const userId = localStorage.getItem('userId');\n  useEffect(() => {\n    fetchConnections();\n  }, []);\n  const fetchConnections = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/Request/Accepted', {\n        params: {\n          userId\n        },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const connectionRequests = response.data;\n      const connectedUsers = connectionRequests.map(request => {\n        if (request.senderId === userId) {\n          // Assuming the receiver will always have the necessary fields\n          return {\n            id: request.receiverId,\n            firstName: request.senderName,\n            // Adjust this to fetch actual values\n            profilePictureUrl: request.senderProfilePicture\n          };\n        } else {\n          return {\n            id: request.senderId,\n            firstName: request.senderName.split(' ')[0],\n            profilePictureUrl: request.senderProfilePicture\n          };\n        }\n      });\n      setConnections(connectedUsers);\n    } catch (error) {\n      console.error('Error fetching connections:', error);\n    }\n  };\n  const handleUserSelect = userId => {\n    if (selectedUserIds.includes(userId)) {\n      setSelectedUserIds(selectedUserIds.filter(id => id !== userId));\n    } else {\n      setSelectedUserIds([...selectedUserIds, userId]);\n    }\n  };\n  const handleCreateGroup = async () => {\n    try {\n      const payload = {\n        name: groupName,\n        invitedUserIds: selectedUserIds\n      };\n      console.log(payload);\n      await axios.post('http://localhost:5001/api/Groups/CreateGroup', payload, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      onGroupCreated();\n    } catch (error) {\n      console.error('Error creating group:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create New Group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Group Name\",\n        value: groupName,\n        onChange: e => setGroupName(e.target.value),\n        className: \"group-name-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Users to Invite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"connections-list\",\n        children: connections.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"connection-item\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedUserIds.includes(user.id),\n              onChange: () => handleUserSelect(user.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 33\n            }, this), user.firstName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this)\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-button\",\n          onClick: handleCreateGroup,\n          children: \"Create Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(GroupModal, \"VFFmKFnNLnnfSWiajh4f1pkwnuM=\");\n_c = GroupModal;\nexport default GroupModal;\nvar _c;\n$RefreshReg$(_c, \"GroupModal\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","GroupModal","onClose","onGroupCreated","_s","groupName","setGroupName","connections","setConnections","selectedUserIds","setSelectedUserIds","token","localStorage","getItem","userId","fetchConnections","response","get","params","headers","Authorization","connectionRequests","data","connectedUsers","map","request","senderId","id","receiverId","firstName","senderName","profilePictureUrl","senderProfilePicture","split","error","console","handleUserSelect","includes","filter","handleCreateGroup","payload","name","invitedUserIds","log","post","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","user","checked","_c","$RefreshReg$"],"sources":["/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/Dashboard/Components/GroupModal/GroupModal.tsx"],"sourcesContent":["// src/components/GroupModal.tsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './GroupModal.css'\n\ninterface Props {\n    onClose: () => void;\n    onGroupCreated: () => void;\n}\n\ninterface Connection {\n    id: string;\n    firstName: string;\n    profilePictureUrl: string;\n}\n\nconst GroupModal: React.FC<Props> = ({ onClose, onGroupCreated }) => {\n    const [groupName, setGroupName] = useState('');\n    const [connections, setConnections] = useState<Connection[]>([]);\n    const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    useEffect(() => {\n        fetchConnections();\n    }, []);\n\n    interface ConnectionRequest {\n        id: number;\n        senderId: string;\n        senderName: string;\n        senderProfilePicture: string;\n        receiverId: string;\n    }\n\n    const fetchConnections = async () => {\n        try {\n            const response = await axios.get('http://localhost:5001/api/Request/Accepted', {\n                params: {userId},\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            const connectionRequests: ConnectionRequest[] = response.data;\n\n            const connectedUsers = connectionRequests.map((request) => {\n                if (request.senderId === userId) {\n                    // Assuming the receiver will always have the necessary fields\n                    return {\n                        id: request.receiverId,\n                        firstName: request.senderName, // Adjust this to fetch actual values\n                        profilePictureUrl: request.senderProfilePicture\n                    };\n                } else {\n                    return {\n                        id: request.senderId,\n                        firstName: request.senderName.split(' ')[0],\n                        profilePictureUrl: request.senderProfilePicture\n                    };\n                }\n            });\n            setConnections(connectedUsers);\n        } catch (error) {\n            console.error('Error fetching connections:', error);\n        }\n    };\n\n    const handleUserSelect = (userId: string) => {\n        if (selectedUserIds.includes(userId)) {\n            setSelectedUserIds(selectedUserIds.filter((id) => id !== userId));\n        } else {\n            setSelectedUserIds([...selectedUserIds, userId]);\n        }\n    };\n\n    const handleCreateGroup = async () => {\n        try {\n            const payload = {\n                name: groupName,\n                invitedUserIds: selectedUserIds,\n            };\n            console.log(payload)\n\n            await axios.post('http://localhost:5001/api/Groups/CreateGroup', payload, {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            onGroupCreated();\n        } catch (error) {\n            console.error('Error creating group:', error);\n        }\n    };\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <button className=\"close-button\" onClick={onClose}>\n                    &times;\n                </button>\n                <h2>Create New Group</h2>\n                <input\n                    type=\"text\"\n                    placeholder=\"Group Name\"\n                    value={groupName}\n                    onChange={(e) => setGroupName(e.target.value)}\n                    className=\"group-name-input\"\n                />\n                <h3>Select Users to Invite</h3>\n                <ul className=\"connections-list\">\n                    {connections.map((user) => (\n                        <li key={user.id} className=\"connection-item\">\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={selectedUserIds.includes(user.id)}\n                                    onChange={() => handleUserSelect(user.id)}\n                                />\n                                {user.firstName}\n                            </label>\n                        </li>\n                    ))}\n                </ul>\n                <div className=\"modal-buttons\">\n                    <button className=\"create-button\" onClick={handleCreateGroup}>\n                        Create Group\n                    </button>\n                    <button className=\"cancel-button\" onClick={onClose}>\n                        Cancel\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default GroupModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}