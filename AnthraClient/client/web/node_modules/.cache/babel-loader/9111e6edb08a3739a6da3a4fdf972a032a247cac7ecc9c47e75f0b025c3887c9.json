{"ast":null,"code":"var _jsxFileName = \"/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/LanguageContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext(undefined);\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLanguage] = useState('da'); // Default language is Danish\n\n  const switchLanguage = lang => {\n    setLanguage(lang);\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      switchLanguage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_s(LanguageProvider, \"v4uMswv8ChHFO+kKBQoiRsgUfQM=\");\n_c = LanguageProvider;\nexport const useLanguage = () => {\n  _s2();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n  }\n  return context;\n};\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","LanguageContext","undefined","LanguageProvider","children","_s","language","setLanguage","switchLanguage","lang","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLanguage","_s2","context","Error","$RefreshReg$"],"sources":["/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/LanguageContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\ntype LanguageContextType = {\n    language: string;\n    switchLanguage: (lang: string) => void;\n};\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [language, setLanguage] = useState<string>('da'); // Default language is Danish\n\n    const switchLanguage = (lang: string) => {\n        setLanguage(lang);\n    };\n\n    return (\n        <LanguageContext.Provider value={{ language, switchLanguage }}>\n            {children}\n        </LanguageContext.Provider>\n    );\n};\n\nexport const useLanguage = () => {\n    const context = useContext(LanguageContext);\n    if (!context) {\n        throw new Error(\"useLanguage must be used within a LanguageProvider\");\n    }\n    return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnE,MAAMC,eAAe,gBAAGL,aAAa,CAAkCM,SAAS,CAAC;AAEjF,OAAO,MAAMC,gBAAyD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAS,IAAI,CAAC,CAAC,CAAC;;EAExD,MAAMU,cAAc,GAAIC,IAAY,IAAK;IACrCF,WAAW,CAACE,IAAI,CAAC;EACrB,CAAC;EAED,oBACIT,OAAA,CAACC,eAAe,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,QAAQ;MAAEE;IAAe,CAAE;IAAAJ,QAAA,EACzDA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC,CAAC;AAACV,EAAA,CAZWF,gBAAyD;AAAAa,EAAA,GAAzDb,gBAAyD;AActE,OAAO,MAAMc,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAGtB,UAAU,CAACI,eAAe,CAAC;EAC3C,IAAI,CAACkB,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACzE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}