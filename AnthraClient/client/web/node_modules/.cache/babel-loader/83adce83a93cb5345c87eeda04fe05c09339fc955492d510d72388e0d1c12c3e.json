{"ast":null,"code":"var _jsxFileName = \"/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/Dashboard/Components/MessageList/MessageList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './MessageList.css';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageList = () => {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const navigate = useNavigate();\n  const currentUserId = localStorage.getItem('userId');\n  useEffect(() => {\n    if (!currentUserId) {\n      console.error('User ID not found in localStorage.');\n      return;\n    }\n    fetch(`http://localhost:5001/api/Messages/GetConversations?userId=${currentUserId}`).then(response => {\n      if (!response.ok) {\n        return response.text().then(text => {\n          console.error('Error fetching conversations:', text);\n          throw new Error(`HTTP error! status: ${response.status}`);\n        });\n      }\n      return response.json();\n    }).then(data => {\n      setConversations(data);\n    }).catch(error => console.error('Error fetching conversations:', error));\n  }, [currentUserId]);\n  const handleConversationClick = userId => {\n    navigate(`/messages/${userId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-list\",\n    children: conversations.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No conversations found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this) : conversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-row\",\n      onClick: () => handleConversationClick(conversation.userId),\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5001${conversation.userProfilePicture}` || '/default-profile.png',\n        alt: \"Profile\",\n        className: \"conversation-avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversation-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: conversation.userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"last-message\",\n          children: conversation.lastMessageContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversation-timestamp\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: conversation.lastMessageTimestamp ? new Date(conversation.lastMessageTimestamp).toLocaleDateString() : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this), \"x\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this)]\n    }, conversation.userId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageList, \"kumPv95XaZzqxgpzG63BUVRiZ18=\", false, function () {\n  return [useNavigate];\n});\n_c = MessageList;\nexport default MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","MessageList","_s","conversations","setConversations","navigate","currentUserId","localStorage","getItem","console","error","fetch","then","response","ok","text","Error","status","json","data","catch","handleConversationClick","userId","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","conversation","onClick","src","userProfilePicture","alt","userName","lastMessageContent","lastMessageTimestamp","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/Dashboard/Components/MessageList/MessageList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './MessageList.css';\nimport { useNavigate } from 'react-router-dom';\n\ninterface Conversation {\n    userId: string;\n    userName: string;\n    userEmail: string;\n    userProfilePicture?: string;\n    lastMessageContent: string;\n    lastMessageTimestamp: string;\n}\n\nconst MessageList: React.FC = () => {\n    const [conversations, setConversations] = useState<Conversation[]>([]);\n    const navigate = useNavigate();\n    const currentUserId = localStorage.getItem('userId');\n\n    useEffect(() => {\n        if (!currentUserId) {\n            console.error('User ID not found in localStorage.');\n            return;\n        }\n\n        fetch(`http://localhost:5001/api/Messages/GetConversations?userId=${currentUserId}`)\n            .then((response) => {\n                if (!response.ok) {\n                    return response.text().then((text) => {\n                        console.error('Error fetching conversations:', text);\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    });\n                }\n                return response.json();\n            })\n            .then((data) => {\n                    setConversations(data)\n                }\n            )\n            .catch((error) => console.error('Error fetching conversations:', error));\n    }, [currentUserId]);\n\n    const handleConversationClick = (userId: string) => {\n        navigate(`/messages/${userId}`);\n    };\n\n    return (\n        <div className=\"message-list\">\n            {conversations.length === 0 ? (\n                <p>No conversations found.</p>\n            ) : (\n                conversations.map((conversation) => (\n                    <div\n                        key={conversation.userId}\n                        className=\"conversation-row\"\n                        onClick={() => handleConversationClick(conversation.userId)}\n                    >\n                        <img\n                            src={`http://localhost:5001${conversation.userProfilePicture}` || '/default-profile.png'}\n                            alt=\"Profile\"\n                            className=\"conversation-avatar\"\n                        />\n                        <div className=\"conversation-info\">\n                            <h3>{conversation.userName}</h3>\n                            <p className=\"last-message\">{conversation.lastMessageContent}</p>\n                        </div>\n                        <div className=\"conversation-timestamp\">\n              <span>\n                {conversation.lastMessageTimestamp\n                    ? new Date(conversation.lastMessageTimestamp).toLocaleDateString()\n                    : ''}\n              </span>x\n                        </div>\n                    </div>\n                ))\n            )}\n        </div>\n    );\n};\n\nexport default MessageList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}