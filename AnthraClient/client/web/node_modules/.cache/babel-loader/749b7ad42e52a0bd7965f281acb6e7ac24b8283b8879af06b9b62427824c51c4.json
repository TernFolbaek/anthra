{"ast":null,"code":"var _jsxFileName = \"/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/Dashboard/Components/Connections/Connections.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Connections.css';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Connections = () => {\n  _s();\n  const [connections, setConnections] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchConnections = async () => {\n      try {\n        // Retrieve the current user's ID from localStorage\n        const userId = localStorage.getItem('userId');\n        if (!userId) {\n          setError('User ID not found. Please log in again.');\n          setLoading(false);\n          return;\n        }\n\n        // Fetch accepted connection requests involving the current user\n        const response = await axios.get('http://localhost:5001/api/Request/Accepted', {\n          params: {\n            userId\n          },\n          withCredentials: true\n        });\n        const connectionRequests = response.data;\n\n        // Extract the other users from the connection requests\n        const connectedUsers = connectionRequests.map(request => {\n          if (request.senderId === userId) {\n            // Assuming the receiver will always have the necessary fields\n            return {\n              id: request.receiverId,\n              firstName: request.senderName,\n              // Adjust this to fetch actual values\n              email: request.senderEmail,\n              profilePictureUrl: request.senderProfilePicture\n            };\n          } else {\n            return {\n              id: request.senderId,\n              firstName: request.senderName.split(' ')[0],\n              lastName: request.senderName.split(' ')[1],\n              profilePictureUrl: request.senderProfilePicture\n            };\n          }\n        });\n        setConnections(connectedUsers);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching connections:', err);\n        setError('Failed to fetch connections. Please try again later.');\n        setLoading(false);\n      }\n    };\n    fetchConnections();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connections-loading\",\n      children: \"Loading connections...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connections-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connections-container\",\n    children: connections.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You have no connections yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connections-grid\",\n      children: connections.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://localhost:5001${user.profilePictureUrl}`,\n          alt: `${user.firstName} `,\n          className: \"connection-profile-picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: `${user.firstName}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"message-button\",\n            onClick: () => {\n              navigate(`/messages/${user.id}`);\n            },\n            children: \"Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this)]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n_s(Connections, \"RruzK9BzoK+OHRzmQSnXxw4AT7w=\", false, function () {\n  return [useNavigate];\n});\n_c = Connections;\nexport default Connections;\nvar _c;\n$RefreshReg$(_c, \"Connections\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","jsxDEV","_jsxDEV","Connections","_s","connections","setConnections","loading","setLoading","error","setError","navigate","fetchConnections","userId","localStorage","getItem","response","get","params","withCredentials","connectionRequests","data","connectedUsers","map","request","senderId","id","receiverId","firstName","senderName","email","senderEmail","profilePictureUrl","senderProfilePicture","split","lastName","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","user","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/Dashboard/Components/Connections/Connections.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Connections.css';\nimport { useNavigate } from 'react-router-dom';\n\ninterface ApplicationUser {\n    id: string;\n    firstName: string;\n    profilePictureUrl: string;\n}\n\ntype ConnectionStatus = 'Pending' | 'Accepted' | 'Declined';\n\ninterface ConnectionRequest {\n    id: number;\n    senderId: string;\n    senderName: string;\n    senderProfilePicture: string;\n    receiverId: string;\n    status: ConnectionStatus;\n    requestedAt: string;\n    respondedAt: string | null;\n    senderEmail: string;\n}\n\nconst Connections: React.FC = () => {\n    const [connections, setConnections] = useState<ApplicationUser[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchConnections = async () => {\n            try {\n                // Retrieve the current user's ID from localStorage\n                const userId = localStorage.getItem('userId');\n                if (!userId) {\n                    setError('User ID not found. Please log in again.');\n                    setLoading(false);\n                    return;\n                }\n\n                // Fetch accepted connection requests involving the current user\n                const response = await axios.get('http://localhost:5001/api/Request/Accepted', {\n                    params: { userId },\n                    withCredentials: true,\n                });\n                const connectionRequests: ConnectionRequest[] = response.data;\n\n                // Extract the other users from the connection requests\n                const connectedUsers = connectionRequests.map((request) => {\n                    if (request.senderId === userId) {\n                        // Assuming the receiver will always have the necessary fields\n                        return {\n                            id: request.receiverId,\n                            firstName: request.senderName, // Adjust this to fetch actual values\n                            email: request.senderEmail,\n                            profilePictureUrl: request.senderProfilePicture\n                        };\n                    } else {\n                        return {\n                            id: request.senderId,\n                            firstName: request.senderName.split(' ')[0],\n                            lastName: request.senderName.split(' ')[1],\n                            profilePictureUrl: request.senderProfilePicture\n                        };\n                    }\n                });\n\n                setConnections(connectedUsers);\n                setLoading(false);\n            } catch (err) {\n                console.error('Error fetching connections:', err);\n                setError('Failed to fetch connections. Please try again later.');\n                setLoading(false);\n            }\n        };\n\n        fetchConnections();\n    }, []);\n\n    if (loading) {\n        return <div className=\"connections-loading\">Loading connections...</div>;\n    }\n\n    if (error) {\n        return <div className=\"connections-error\">{error}</div>;\n    }\n\n    return (\n        <div className=\"connections-container\">\n            {connections.length === 0 ? (\n                <p>You have no connections yet.</p>\n            ) : (\n                <div className=\"connections-grid\">\n                    {connections.map((user) => (\n                        <div key={user.id} className=\"connection-card\">\n                            <img\n                                src={`http://localhost:5001${user.profilePictureUrl}`}\n                                alt={`${user.firstName} `}\n                                className=\"connection-profile-picture\"\n                            />\n                            <h3>{`${user.firstName}`}</h3>\n                            <div className=\"button-container\">\n                                <button\n                                    className=\"message-button\"\n                                    onClick={() => {\n                                        navigate(`/messages/${user.id}`);\n                                    }}\n                                >\n                                    Message\n                                </button>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Connections;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}