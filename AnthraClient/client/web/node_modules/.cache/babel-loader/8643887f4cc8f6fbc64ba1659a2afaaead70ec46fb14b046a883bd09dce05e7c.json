{"ast":null,"code":"var _jsxFileName = \"/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/Dashboard/Components/Settings/ConfigurationSettings/ConfigurationSettings.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ConfigurationSettings.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfigurationSettings = () => {\n  _s();\n  // Parse the value from localStorage and default to false if it's null\n  const storedDarkMode = localStorage.getItem('isDark') === 'true';\n  const [darkMode, setDarkMode] = useState(storedDarkMode);\n  const toggleDarkMode = () => {\n    setDarkMode(prevMode => {\n      const newMode = !prevMode;\n      // Update localStorage when the mode changes\n      localStorage.setItem('isDark', newMode.toString());\n      document.body.classList.toggle('dark-mode', newMode);\n      return newMode;\n    });\n  };\n  useEffect(() => {\n    // Ensure the body class reflects the current dark mode setting on load\n    if (darkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }, [darkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"configuration-settings\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Configuration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toggle-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Dark Mode:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-switch\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"darkModeToggle\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"darkModeToggle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(ConfigurationSettings, \"SNWS3ZFkNhbUj3aKsYCbzXNU8Ws=\");\n_c = ConfigurationSettings;\nexport default ConfigurationSettings;\nvar _c;\n$RefreshReg$(_c, \"ConfigurationSettings\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ConfigurationSettings","_s","storedDarkMode","localStorage","getItem","darkMode","setDarkMode","toggleDarkMode","prevMode","newMode","setItem","toString","document","body","classList","toggle","add","remove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","checked","onChange","htmlFor","_c","$RefreshReg$"],"sources":["/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/Dashboard/Components/Settings/ConfigurationSettings/ConfigurationSettings.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ConfigurationSettings.css';\n\nconst ConfigurationSettings: React.FC = () => {\n    // Parse the value from localStorage and default to false if it's null\n    const storedDarkMode = localStorage.getItem('isDark') === 'true';\n    const [darkMode, setDarkMode] = useState(storedDarkMode);\n\n    const toggleDarkMode = () => {\n        setDarkMode((prevMode) => {\n            const newMode = !prevMode;\n            // Update localStorage when the mode changes\n            localStorage.setItem('isDark', newMode.toString());\n            document.body.classList.toggle('dark-mode', newMode);\n            return newMode;\n        });\n    };\n\n    useEffect(() => {\n        // Ensure the body class reflects the current dark mode setting on load\n        if (darkMode) {\n            document.body.classList.add('dark-mode');\n        } else {\n            document.body.classList.remove('dark-mode');\n        }\n    }, [darkMode]);\n\n    return (\n        <div className=\"configuration-settings\">\n            <h2>Configuration</h2>\n            <div className=\"toggle-group\">\n                <label>Dark Mode:</label>\n                <div className=\"toggle-switch\">\n                    <input\n                        type=\"checkbox\"\n                        id=\"darkModeToggle\"\n                        checked={darkMode}\n                        onChange={toggleDarkMode}\n                    />\n                    <label htmlFor=\"darkModeToggle\"></label>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ConfigurationSettings;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,qBAA+B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C;EACA,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,KAAK,MAAM;EAChE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAACM,cAAc,CAAC;EAExD,MAAMK,cAAc,GAAGA,CAAA,KAAM;IACzBD,WAAW,CAAEE,QAAQ,IAAK;MACtB,MAAMC,OAAO,GAAG,CAACD,QAAQ;MACzB;MACAL,YAAY,CAACO,OAAO,CAAC,QAAQ,EAAED,OAAO,CAACE,QAAQ,CAAC,CAAC,CAAC;MAClDC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEN,OAAO,CAAC;MACpD,OAAOA,OAAO;IAClB,CAAC,CAAC;EACN,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACZ;IACA,IAAIQ,QAAQ,EAAE;MACVO,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,GAAG,CAAC,WAAW,CAAC;IAC5C,CAAC,MAAM;MACHJ,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACG,MAAM,CAAC,WAAW,CAAC;IAC/C;EACJ,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAEd,oBACIN,OAAA;IAAKmB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACnCpB,OAAA;MAAAoB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBxB,OAAA;MAAKmB,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBpB,OAAA;QAAAoB,QAAA,EAAO;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzBxB,OAAA;QAAKmB,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC1BpB,OAAA;UACIyB,IAAI,EAAC,UAAU;UACfC,EAAE,EAAC,gBAAgB;UACnBC,OAAO,EAAErB,QAAS;UAClBsB,QAAQ,EAAEpB;QAAe;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC,eACFxB,OAAA;UAAO6B,OAAO,EAAC;QAAgB;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACtB,EAAA,CAzCID,qBAA+B;AAAA6B,EAAA,GAA/B7B,qBAA+B;AA2CrC,eAAeA,qBAAqB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}