{"ast":null,"code":"var _jsxFileName = \"/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/Dashboard/Components/Messages/Messages.tsx\",\n  _s = $RefreshSig$();\n// Messages.tsx\nimport React, { useEffect, useState } from 'react';\nimport './Messages.css';\nimport * as signalR from '@microsoft/signalr';\nimport { useParams } from 'react-router-dom';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Messages = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const currentUserId = localStorage.getItem('userId');\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState('');\n  const [connection, setConnection] = useState(null);\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    // Get messages\n    fetch(`http://localhost:5001/api/Messages/GetChatHistory?userId=${currentUserId}&contactId=${userId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => response.json()).then(data => setMessages(data)).catch(error => console.error('Error fetching messages:', error));\n\n    // Initialize SignalR connection\n    const newConnection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5001/chatHub').withAutomaticReconnect().build();\n    setConnection(newConnection);\n  }, [currentUserId, userId, token]);\n  useEffect(() => {\n    if (connection) {\n      connection.start().then(() => {\n        // Join group for this chat\n        if (userId !== undefined) {\n          connection.invoke('JoinGroup', getChatGroupId(currentUserId, userId));\n        }\n        connection.on('ReceiveMessage', message => {\n          setMessages(prevMessages => [...prevMessages, message]);\n        });\n      }).catch(error => console.error('Connection failed: ', error));\n    }\n  }, [connection, currentUserId, userId]);\n  const handleAcceptInvitation = async groupId => {\n    try {\n      await axios.post('http://localhost:5001/api/Groups/RespondToInvitation', {\n        groupId,\n        accept: true\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      // Refresh messages or group list\n    } catch (error) {\n      console.error('Error accepting invitation:', error);\n    }\n  };\n  const handleDeclineInvitation = async groupId => {\n    try {\n      await axios.post('http://localhost:5001/api/Groups/RespondToInvitation', {\n        groupId,\n        accept: false\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      // Refresh messages\n    } catch (error) {\n      console.error('Error declining invitation:', error);\n    }\n  };\n  const sendMessage = async () => {\n    if (messageInput.trim() === '') return;\n    const message = {\n      senderId: currentUserId,\n      receiverId: userId,\n      content: messageInput\n    };\n    console.log(message);\n    try {\n      const response = await fetch('http://localhost:5001/api/Messages/SendMessage', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(message)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Error sending message:', errorData);\n        return;\n      }\n      setMessageInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const getChatGroupId = (userA, userB) => {\n    return userA < userB ? `${userA}-${userB}` : `${userB}-${userA}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map(msg => msg.isGroupInvitation ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invitation-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invitation-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"invitation-accept-button\",\n            onClick: () => handleAcceptInvitation(msg.groupId),\n            children: \"Accept\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"invitation-decline-button\",\n            onClick: () => handleDeclineInvitation(msg.groupId),\n            children: \"Decline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }, this)]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-bubble ${msg.senderId === currentUserId ? 'sent' : 'received'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 29\n        }, this)]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: messageInput,\n        onChange: e => setMessageInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n};\n_s(Messages, \"13K+ZS8nqgGwWmmM+FH4xfj7p2o=\", false, function () {\n  return [useParams];\n});\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["React","useEffect","useState","signalR","useParams","axios","jsxDEV","_jsxDEV","Messages","_s","userId","currentUserId","localStorage","getItem","messages","setMessages","messageInput","setMessageInput","connection","setConnection","token","fetch","headers","then","response","json","data","catch","error","console","newConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","undefined","invoke","getChatGroupId","on","message","prevMessages","handleAcceptInvitation","groupId","post","accept","Authorization","handleDeclineInvitation","sendMessage","trim","senderId","receiverId","content","log","method","body","JSON","stringify","ok","errorData","userA","userB","className","children","map","msg","isGroupInvitation","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","Date","timestamp","toLocaleTimeString","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/tyf/Documents/software-programming/personal-coding-projects/Anthra/AnthraClient/client/web/src/Dashboard/Components/Messages/Messages.tsx"],"sourcesContent":["// Messages.tsx\nimport React, { useEffect, useState } from 'react';\nimport './Messages.css';\nimport * as signalR from '@microsoft/signalr';\nimport { useParams } from 'react-router-dom';\nimport axios from \"axios\";\n\ninterface Message {\n    id: number;\n    senderId: string;\n    receiverId: string;\n    content: string;\n    timestamp: string;\n    isGroupInvitation: boolean;\n    groupId?: number;\n}\n\nconst Messages: React.FC = () => {\n    const { userId } = useParams<{ userId: string }>();\n    const currentUserId = localStorage.getItem('userId');\n    const [messages, setMessages] = useState<Message[]>([]);\n    const [messageInput, setMessageInput] = useState('');\n    const [connection, setConnection] = useState<signalR.HubConnection | null>(null);\n    const token = localStorage.getItem('token');\n\n    useEffect(() => {\n        // Get messages\n        fetch(\n            `http://localhost:5001/api/Messages/GetChatHistory?userId=${currentUserId}&contactId=${userId}`,\n            {\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                },\n            }\n        )\n            .then((response) => response.json())\n            .then((data) => setMessages(data))\n            .catch((error) => console.error('Error fetching messages:', error));\n\n        // Initialize SignalR connection\n        const newConnection = new signalR.HubConnectionBuilder()\n            .withUrl('http://localhost:5001/chatHub')\n            .withAutomaticReconnect()\n            .build();\n\n        setConnection(newConnection);\n    }, [currentUserId, userId, token]);\n\n    useEffect(() => {\n        if (connection) {\n            connection\n                .start()\n                .then(() => {\n                    // Join group for this chat\n                    if (userId !== undefined) {\n                        connection.invoke('JoinGroup', getChatGroupId(currentUserId!, userId));\n                    }\n\n                    connection.on('ReceiveMessage', (message: Message) => {\n                        setMessages((prevMessages) => [...prevMessages, message]);\n                    });\n                })\n                .catch((error) => console.error('Connection failed: ', error));\n        }\n    }, [connection, currentUserId, userId]);\n\n    const handleAcceptInvitation = async (groupId: number) => {\n        try {\n            await axios.post(\n                'http://localhost:5001/api/Groups/RespondToInvitation',\n                { groupId, accept: true },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            // Refresh messages or group list\n        } catch (error) {\n            console.error('Error accepting invitation:', error);\n        }\n    };\n\n    const handleDeclineInvitation = async (groupId: number) => {\n        try {\n            await axios.post(\n                'http://localhost:5001/api/Groups/RespondToInvitation',\n                { groupId, accept: false },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            // Refresh messages\n        } catch (error) {\n            console.error('Error declining invitation:', error);\n        }\n    };\n\n    const sendMessage = async () => {\n        if (messageInput.trim() === '') return;\n\n        const message = {\n            senderId: currentUserId,\n            receiverId: userId,\n            content: messageInput,\n        };\n\n        console.log(message);\n\n        try {\n            const response = await fetch('http://localhost:5001/api/Messages/SendMessage', {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(message),\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error('Error sending message:', errorData);\n                return;\n            }\n\n            setMessageInput('');\n        } catch (error) {\n            console.error('Error sending message:', error);\n        }\n    };\n\n    const getChatGroupId = (userA: string, userB: string) => {\n        return userA < userB ? `${userA}-${userB}` : `${userB}-${userA}`;\n    };\n\n    return (\n        <div className=\"messages-page\">\n            <div className=\"messages-container\">\n                {messages.map((msg) =>\n                    msg.isGroupInvitation ? (\n                        <div className=\"invitation-message\" key={msg.id}>\n                            <h3>{msg.content}</h3>\n                            <div className=\"invitation-buttons\">\n                                <button className=\"invitation-accept-button\" onClick={() => handleAcceptInvitation(msg.groupId!)}>Accept</button>\n                                <button className=\"invitation-decline-button\" onClick={() => handleDeclineInvitation(msg.groupId!)}>Decline</button>\n                            </div>\n\n                        </div>\n                    ) : (\n                        <div\n                            key={msg.id}\n                            className={`message-bubble ${\n                                msg.senderId === currentUserId ? 'sent' : 'received'\n                            }`}\n                        >\n                            <p>{msg.content}</p>\n                            <span>{new Date(msg.timestamp).toLocaleTimeString()}</span>\n                        </div>\n                    )\n                )}\n            </div>\n            <div className=\"message-input-container\">\n                <input\n                    type=\"text\"\n                    value={messageInput}\n                    onChange={(e) => setMessageInput(e.target.value)}\n                    placeholder=\"Type your message...\"\n                />\n                <button onClick={sendMessage}>Send</button>\n            </div>\n        </div>\n    );\n\n};\n\nexport default Messages;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}